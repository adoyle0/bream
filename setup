#!/bin/bash
read -r -d '' HEADER <<-'EOF'
:::::::. :::::::..  .,::::::   :::.     .        :
 ;;;'';;';;;;``;;;; ;;;;''''   ;;`;;    ;;,.    ;;;
 [[[__[[\.[[[,/[[['  [[cccc   ,[[ '[[,  [[[[, ,[[[[,
 $$""""Y$$$$$$$$c    $$""""  c$$$cc$$$c $$$$$$$$"$$$
_88o,,od8P888b "88bo,888oo,__ 888   888,888 Y88" 888o
""YUMMMP" MMMM   "W" """"YUMMMYMM   ""` MMM  M'  "MMM

       Bash   Rules   Everything   Around   Me
-----------------------------------------------------
EOF

bin_dir=/usr/bin
config_dir="$HOME"/.config
cache_dir="$HOME"/.cache/bream
git_url=https://git.doordesk.net/adam/bream.git

if [ "$1" = local ]; then
    local_repo=0
fi

ensure_paru() {
    if [ ! "$(command -v paru)" ]; then
        echo "Installing paru..."

        local paru_dir="$cache_dir"/paru

        # git clone will return 0 even on error so clean up ahead of time
        rm -rf "$paru_dir"

        git clone https://aur.archlinux.org/paru-bin.git "$paru_dir" &&
        cd "$paru_dir" &&
        makepkg -si --noconfirm || return 1
    fi

    return 0
}

install_base_arch() {
    echo "Installing base..."

    paru -S --needed --noconfirm \
        archlinux-contrib \
        bat \
        btop \
        byobu \
        cargo-binstall \
        coreutils \
        kitty-terminfo \
        glow \
        man-db \
        man-pages \
        mold \
        mosh \
        pacman-contrib \
        rsync \
        sl \
        tar \
        tree \
        unrar \
        unzip \
        wget \
        &&

    # Fish and deps
    paru -S --needed --noconfirm fish \
        pkgfile \
        &&

    # Neovim and deps
    paru -S --needed --noconfirm neovim \
        fzf \
        go \
        npm \
        ripgrep \
        rubygems \
        &&

    # Yazi and deps
    paru -S --needed --noconfirm yazi \
        jq \
        7zip \
        ffmpeg \
        fd \
        ripgrep \
        fzf \
        poppler \
        zoxide \
        imagemagick \
        chafa\
        &&

    cargo binstall --no-confirm leptosfmt || return 1

    return 0
}

init_browser() {
    echo "Setting default browser..."

    # Unset BROWSER because xdg gets pissy if it doesn't feel like it's the authority
    unset BROWSER &&
    xdg-settings set default-web-browser librewolf.desktop &&
    # Set it anyway
    export BROWSER=librewolf || return 1

    return 0
}

init_pywalfox() {
    if ! test -f "$HOME"/.librewolf/native-messaging-hosts/pywalfox.json; then
        echo "Configuring pywalfox..."
        pywalfox install --browser librewolf || return 1
    fi

    return 0
}

init_wallpaper() {
    # Copy default wallpaper if it doesn't exist
    if ! test -f "$HOME"/Pictures/Wallpapers/bream.jpg; then
        if ! test -d "$HOME"/Pictures/Wallpapers; then
            mkdir -p "$HOME"/Pictures/Wallpapers &&
            curl -so "$HOME"/Pictures/Wallpapers/bream.jpg https://old.doordesk.net/bream.jpg || return 1
        fi
    fi

    return 0
}

install_gui_arch() {
    paru -S --needed --noconfirm \
        acpi \
        bluez \
        chromium \
        gnome-themes-extra \
        librewolf-bin \
        noto-fonts \
        noto-fonts-cjk \
        noto-fonts-emoji \
        otf-commit-mono-nerd \
        playerctl \
        python-pywalfox-librewolf \
        ttf-noto-nerd \
        wallust \
        zathura \
        &&

    # Hyprland setup
    paru -S --needed --noconfirm hyprland \
        cliphist \
        hyprpolkitagent \
        grim \
        kitty \
        kitty-shell-integration \
        mako \
        pipewire \
        qt5-wayland \
        qt6-wayland \
        slurp \
        swww \
        uwsm \
        wl-clip-persist \
        waybar \
        wireplumber \
        wofi \
        xdg-desktop-portal \
        xdg-desktop-portal-gtk \
        xdg-desktop-portal-hyprland \
        &&

    # Set dark theme
    # Unset and then reset to ensure it sticks in case dconf doesn't exist
    gsettings set org.gnome.desktop.interface color-scheme 'prefer-light' &&
    gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark' &&
    gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita' &&
    gsettings set org.gnome.desktop.interface gtk-theme 'Adwaita-dark' &&

    # Enable this as a service to keep it out of the config
    systemctl --user enable --now hyprpolkitagent.service \
        || return 1


    return 0
}

install_extras_arch() {
    paru -S --needed --noconfirm \
        discord \
        gimp \
        spotify-launcher \
        telegram-desktop \
        thunderbird \
        walogram-git \
        &&

    # Caprine depends on electon29 and it fails to build from the source it provides
    # A bin package exists so we're using it
    paru -S --needed --noconfirm electron29-bin &&

    # Ensure caprine comes after its dependency
    paru -S --needed --noconfirm caprine-bin || return 1

    return 0
}

install_shell() {
    if ! [ "$SHELL" = "/bin/fish" ]; then
        sudo chsh -s /bin/fish "$USER" &&
        echo "Log out and back in for changes to take effect"
    fi

    return 0
}

install_configs() {
    [ ! -d "$config_dir" ] && { mkdir -p "$config_dir" || return 1; }

    cd "$cache_dir"/config &&
    for file in *; do
        local oldfile="$config_dir"
        # TODO: Add clean install option
        # [ -e "$oldfile" ] && rm -rf "$oldfile"
        cp -r --update=all "$file" "$oldfile" || break
    done || return 1

    return 0
}

install_bin() {
    [ ! -d "$bin_dir" ] && { mkdir -p "$bin_dir" || return 1; }

    cd "$cache_dir" &&
    sudo cp -r --update=all bin/* "$bin_dir" || return 1

    return 0
}

install_home() {
    cd "$cache_dir"/home &&

    for file in *; do
        cp -r "$file" "$HOME"/."$file" || break
    done || return 1

    return 0
}

cleanup() {
    rm -rf "$cache_dir"
}

prepare() {
    # Enable pacman colors
    sudo sed '/Color/s/^#//' -i /etc/pacman.conf &&

    # Enable multi-threading for xz
    export XZ_DEFAULTS="-T 0" &&

    # grab mold here for linking any rust builds during the rest of the install
    sudo pacman -S --needed --noconfirm git base-devel mold &&

    # Sync files
    if [ "$local_repo" ]; then
        cp -r . "$cache_dir"
    else
        git clone "$git_url" "$cache_dir"
    fi &&

    # Copy home files because it includes things like mold for rustc and some gpg keyservers
    install_home &&
    ensure_paru &&

    # Rank mirrors for SPEED
    paru -S --needed --noconfirm rate-mirrors-bin &&
    install_bin &&
    if [ ! "$local_repo" ]; then
        bream mirrors
    fi || return 1

    return 0
}

setup_arch() {
    prepare &&

    if [ "$1" -ge 1 ]; then
        install_base_arch || return 1
    fi &&

    if [ "$1" -ge 2 ]; then
        install_gui_arch &&
        init_browser &&
        init_pywalfox &&
        init_wallpaper || return 1

    fi &&

    if [ "$1" -ge 3 ]; then
        install_extras_arch || return 1
    fi &&

    install_configs &&
    install_shell &&

    # this should be last
    cleanup || return 1

    return 0
}

draw_header() {
    clear && echo "$HEADER" || return 1

    return 0
}

get_user_input() {
    read -r -p 'Choose your adventure:

 1. Base shell/CLI stuff only
 2. Above plus basic GUI stuff
 3. Above plus extras (bloat)

    Enter number: ' input &&

    # Filter input
    if ! [[ "$input" =~ ^[0-9]+$ ]]; then
        echo "Error: Not a number"
        exit 1

    elif [ "$input" -lt 1 ] || [ "$input" -gt 4 ]; then
        echo "Error: Input out of range"
        exit 1
    else
        echo "$input"
    fi || exit 1

    return 0
}

main() {
    draw_header

    user_input=$(get_user_input)

    draw_header

    # Detect OS and act accordingly
    . /etc/os-release
    local os_name=$NAME

    case "$os_name" in
        *Arch*)
            printf "Setup for %s\n\n" "$os_name"
            setup_arch "$user_input" || return 1
            ;;
        *)
            printf '%s' "$os_name is not supported at this time\n"
            return 1
            ;;
    esac

    # # Hack because everything gets weird.. probably from wiping hyprland.conf
    # if [ "$user_input" -gt 1 ]; then
    #     hyprctl reload
    # fi

    return 0
}

{
    main && exit 0
    } || {
    echo "Setup failed" &&
    cleanup &&
    exit 1
}
